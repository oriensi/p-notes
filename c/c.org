#+TITLE: C/C++
#+OPTIONS: \n:t
#+FILETAGS: :c:c++:

* 基础
+ 参数传递方式 :: 值传递, 只传参数的拷贝
+ 宏 :: 在预编译时展开，编译时为展开后的代码

* macro
+ #include :: 包含头文件
+ #define :: 替换, 不会计算参数的值，只会直接替换
  #+BEGIN_SRC c
  #define max(A, B) ((A) > (B) ? (A) : (B))
  max(i++, j++); // WRONG, 自增操作执行2遍
  #define square(x) x * x // WRONG, 会有优先级问题
  #+END_SRC
+ #undef :: 取消宏定义，通常用来保证使用的是函数而不是宏
  #+BEGIN_SRC c
  #undef getchar
  int getchar(void) {...}
  #+END_SRC
+ 参数替换 ::
  ~#~ 需要将参数用引号包围时使用
  #+BEGIN_SRC c
  #define dprint(expr) printf(#expr " = %g\n", expr);
  dprint(x/y);
  printf("x/y" " = %g\n", x/y);
  #+END_SRC
  ~##~ 用于连接参数
  #+BEGIN_SRC c
  #define paste(front, back) front ## back
  paste(name, 1) // 相当于 name1 ## 左右的空格不影响
  #+END_SRC
* IO
** 标准输入与输出
*** 每次一个字符
  #+BEGIN_SRC c
  int getchar(void);
  int getc(FILE *stream);
  int fgetc(FILE *stream);

  int putchar(int c);
  int putc(int c, FILE *stream);
  int fputc(int c, FILE *stream);
  #+END_SRC
  =getchar()= 等同于 =getc(stdin)= 可被实现为宏; 而 =fgetc(fp)= 为函数.

  =putchar(c)= 等同于 =putc(c, stdout)= 可被实现为宏; =fputc(c, fp)= 为函数.

*** 每次一行
  #+BEGIN_SRC C
  char *fgets(char* s, int size, FILE *stream);
  char *gets(char*s);
  ssize_t getline(char **lineptr, size_t *n, FILE *stream);

  int fputs(const char *s, FILE *stream);
  int puts(const char *s);
  #+END_SRC

  =fgets= 最多读取 ~n-1~ 个字符，缓冲区总以 ~null~ 结尾;

  =gets= 会删除换行符，而 =fgets= 则保留换行符

  =getline= 当 ~lineptr~ 是空，且 ~n~ 是 0 时，=getline= 会自动分配内存用于存储内容，
  如果 ~lineptr~ 在之前已经分配了 ~n~ 大小的内存，当空间不足时，系统会自动调整大小重新分配空间。
  ~lineptr~ ~n~ 的大小并不是读取内容的大小，而是系统自动分配的大小；
  返回值为读取到的字符个数，不包括最后的'\0'

  =puts= 会将最后一位的 ~null~ 替换为换行输出， =fputs= 不会, 最好用 =fputs= 代替 =puts=

** 格式化输入输出
*** 对齐方式
    : %6.1f   右对齐(负数表示左对齐)，最少点6位，小数点后保留1位
*** printf
#+caption: printf conversions
| character | argument type; CONVERTED TO                                                         |
|-----------+-------------------------------------------------------------------------------------|
| d, i      | int; 有符号的十进制表示                                                             |
|-----------+-------------------------------------------------------------------------------------|
| o         | unsigned int; 无符号八进制表示                                                      |
|-----------+-------------------------------------------------------------------------------------|
| x, X      | unsigned int; (没有前导的0x 或 0X时)无符号十六进制表示;                             |
|           | 0x 使用 abcdef, 0X使用 ABCDEF                                                       |
|-----------+-------------------------------------------------------------------------------------|
| u         | unsigned int; 无符号十进制表示                                                      |
|-----------+-------------------------------------------------------------------------------------|
| c         | int; 转换为unsigned char 类型后的一个字符                                           |
|-----------+-------------------------------------------------------------------------------------|
| s         | char *; 打印字符串中的字符,直到遇到'\0'或已打印了由精度指定的字符数                 |
|-----------+-------------------------------------------------------------------------------------|
| f         | double; 形式为[-]mmm.ddd 的十进制表示,                                              |
|           | 其中 d 的数目由精度确定,默认精度为 6. 精度为 0 时不输出小数点                       |
|-----------+-------------------------------------------------------------------------------------|
| e, E      | double; 形式为[-]m.dddddd e ±xx 或[-]m.dddddd E ±xx.                              |
|           | d 的数目由精度确定,默认精度为 6。精度为 0 时不输出小数点                            |
|-----------+-------------------------------------------------------------------------------------|
| g, G      | double; 当指数小于-4 或大于等于精度时,采用%e 或%E 的格式,                           |
|           | 否则采用%f 的格式。尾部的 0 和小数点不打印                                          |
|-----------+-------------------------------------------------------------------------------------|
| p         | void *; 打印指针值(具体表示方式与实现有关)                                          |
|-----------+-------------------------------------------------------------------------------------|
| n         | int *; 到目前为止,此 printf 调用输出的字符的数目将被写入到相应参数中.不进行参数转换 |
|-----------+-------------------------------------------------------------------------------------|
| %         | 不进行参数转换;打印一个符号%                                                        |

#+BEGIN_SRC c
int i;
printf("hello %n, world\n", &i); // print: hello , world
printf("i=%d\n", i);             // print: i=6
// printf 从开头到%n时打印的字符个数, 即"hello "的字符个数为6
#+END_SRC
*** scanf

* const
顶层const(top-level const) 表示指针本身是个常量，
而底层const(low-level const) 表示指针所指的对象是一个常量

#+BEGIN_SRC C
int main (int argc, char* argv[]) {
    int i = 0;
    int j = -1;
    int *const p1 = &i;        // 不能改变 p1 的值， 这是一个顶层 const
    const int ci = 42;         // 不能改变 ci 的值， 这是一个顶层 const
    const int *p2 = &ci;        // 允许改变 p2 的值， 这是一个底层 const
    const int *const p3 = p2;  // 靠右的 const 是顶层 const, 靠左的是底层 const
    int *const &r = p1;        // 用于声明引用的 const 都是底层 const

    // p1 = &j; // error: 顶层 const 不可以设置 p1 的值
    *p1 = 2;    // ok:    顶层 const 可以设置 *p1 的值

    p2 = &i;    // ok:    底层 const 可以设置 p2 的值
    // *p2 = 4;  // error: 底层 const 不可以设置 *p2 的值
    return 0;
}
#+END_SRC
